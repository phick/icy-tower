#include "Maps.h"



namespace Engine {


	Engine::Maps::Maps()
	{

	}



	void Engine::Maps::loadTextures()
	{


		mapBrick.loadFromFile(MAP_BRICKS);

		this->rectBrick.width = 70;
		this->rectBrick.height = 26;
		this->rectBrick.left = 163;
		this->rectBrick.top = 282;
		
		



		this->rectGold.width = 70;
		this->rectGold.height =26;
		this->rectGold.left = 80;
		this->rectGold.top = 70;



		this->rectIce.width = 70;
		this->rectIce.height = 26;
		this->rectIce.left = 2;
		this->rectIce.top = 2;


		this->rectRed.width = 70;
		this->rectRed.height = 26;
		this->rectRed.left = 242;
		this->rectRed.top = 178;




	}



	void Engine::Maps::initMap()
	{

		//initBackgroundTiles();

		int mapLegend[124][15] =
		{
		{4,4,4,4,4,4,4,4,4,4,4,4,4,4},
		{2,0,0,0,2,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,2,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,2,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,2,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{2,2,2,2,0,0,0,0,0,0,0,0,0,2},
		{2,0,0,0,0,0,0,0,0,0,0,0,0,2},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,3,3,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,3,3,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,3,3,3,3,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,3,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,3,3,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,3,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,3,3,3,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,3,3,3,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,0,0,0,3},
		{3,0,0,0,0,0,0,0,0,0,3,3,3,3},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,1,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,1,1,1,1,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,1,1,0,1},
		{1,1,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,1,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,1,1,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,1,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,1,1,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,1,1,1,1,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,1,1,1,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,1,1,1,0,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1}

		};


		initMapCollision(mapLegend);

		int i;
		int j;

		for (i = 0; i <124; i++)
		{
			for (j=0; j<15; j++)
			{
				switch (mapLegend[i][j])
				{

				case 1:

					this->mapTiles[i][j].setTexture(mapBrick);
					this->mapTiles[i][j].setTextureRect(rectBrick);
					this->mapTiles[i][j].setPosition(rectBrick.width*j,rectBrick.height * i);
					
					break;
				case 2:

					this->mapTiles[i][j].setTexture(mapBrick);
					this->mapTiles[i][j].setTextureRect(rectGold);
					this->mapTiles[i][j].setPosition(rectGold.width * j, rectGold.height * i);


					break;
				case 3:
					this->mapTiles[i][j].setTexture(mapBrick);
					this->mapTiles[i][j].setTextureRect(rectIce);
					this->mapTiles[i][j].setPosition(rectIce.width * j, rectIce.height * i);

					break;
				case 4:
					this->mapTiles[i][j].setTexture(mapBrick);
					this->mapTiles[i][j].setTextureRect(rectRed);
					this->mapTiles[i][j].setPosition(rectRed.width * j, rectRed.height * i);

					break;
			
				}

			}
		}

	}

	void Maps::drawMap(sf::RenderWindow& window)
	
	{
		for (int i = 0; i < 8; i++)
			window.draw(backgroundTiles[i]);

		for (int i = 0; i < 124; i++) {

			for (int j = 0; j < 15; j++) {

				window.draw(mapTiles[i][j]);


			}
		}


	}

	sf::Vector2f Maps::getTilePosition(int i, int j)
	{
		return this->mapTiles[i][j].getPosition();
	}


	void Maps::initBackgroundTiles()
	{

		
		


		mapBck.loadFromFile("res/map/map_bck_01.png");
		// mapBck2.loadFromFile("res/map/map_bck_02.png");

		for (int i = 0; i < 8; i++) {


			backgroundTiles[i].setTexture(mapBck);
			backgroundTiles[i].setPosition(i * 2048, 10);

			

		}

	}


	void Maps::initMapCollision(int map[124][15])
	{

		int i;
		int j;

		for (i = 0; i < 124; i++)
		{
			for (j = 0; j < 15; j++)
			{

			
				this->mapCollision[i][j] = map[i][j];

			}
		}
	}

	int Maps::getMapCollision(int i, int j) {

		return mapCollision[i][j];

	}


	sf::Vector2f Maps::getTileSize(int i, int j)
	{
		return sf::Vector2f(mapTiles[i][j].getGlobalBounds().width, mapTiles[i][j].getGlobalBounds().height);
	}

}